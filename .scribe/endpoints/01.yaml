name: 'User Management'
description: |-

  API for managing users.
endpoints:
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        API for managing users.
      subgroup: ''
      subgroupDescription: ''
      title: 'Get All Users'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "users": [
             {
               "id": 1,
               "name": "John Doe",
               "email": "john@example.com",
               "role": "user",
               "created_at": "2021-01-01T00:00:00.000000Z",
               "updated_at": "2021-01-01T00:00:00.000000Z"
             }
           ]
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/history-connect-user
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        API for managing users.
      subgroup: ''
      subgroupDescription: ''
      title: 'Get User Login History'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "user_logins": [
             {
               "id": 1,
               "user_id": 1,
               "login_time": "2021-01-01T00:00:00.000000Z",
               "logout_time": "2021-01-01T01:00:00.000000Z"
             }
           ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
           "error": "Unauthorized"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/users/{id}'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        API for managing users.
      subgroup: ''
      subgroupDescription: ''
      title: 'Update User'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: non
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      id: non
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the user.'
        required: true
        example: 'John Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      email:
        name: email
        description: 'The email of the user.'
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      role:
        name: role
        description: 'The role of the user.'
        required: false
        example: admin
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      name: 'John Doe'
      email: john@example.com
      role: admin
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "message": "User updated successfully"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
           "error": "Unauthorized"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/users/{id}'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        API for managing users.
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete User'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: blanditiis
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      id: blanditiis
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "message": "User deleted successfully"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
           "error": "Unauthorized"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
